/*
	Некоторые соглашения: 
		- Формат имени файла: jquery.<название проекта>_<название плагина>[.min].js (всё в нижнем регистре)
		- Формат имён методов и переменных -- camelCase	(исключения описаны ниже)
		- Переменные, которые ссылаются на jQuery-объекты называются с префиксом "$", например "$someVar"
	
	В следующем блоке комментария идёт стандартный комментарий-заголовок для плагина
*/

/*
	Demo plugin from project 'Demo Project'

	Dependencies: // Список зависимостей
		- jQuery 1.7.2 - http://jquery.com/
*/
;(function($) { // Стандартная анонимная функция-замыкание; на случай комбинирования с другими скриптами, которые не заканчиваются точкой с запятой перед кодом плагина ставим ";"

	/*
		Название плагина, см. комментарий ниже, где создаётся jQuery-плагин с таким методом
	*/
	var jqPluginName = 'demoProject_demoPlugin';
	
	/*
		"Класс" плагина
	*/
	var demoPlugin = function($elements, options) {
	/*
		Инициализация
		--------------------------------------------------------------------------------------------------
	*/
		// В переменной config храним максимум данных, организовываем иерархически как удобно, локальные переменные -- только очень служебные и временные
		// Эта переменная у каждого экземпляра плагина своя
		var config = $.extend(true, {}, $.fn[jqPluginName].defaults, options);
	
		// Эту переменную удобно использовать как контекст для поиска DOM-элементов
		config.$context = $elements;
		
		// Если это необходимо из соображений производительности -- сохраняем ссылки на выбранные DOM-элементы в переменные, используем контекст для поиска элементов
		config.ui.$clicker = $(config.ui.clicker, config.$context);

		// Кстати:
		// if (config.ui.$clicker == null) {...}; // проверка, что была попытка выбрать элемент
		// if (config.ui.$clicker.length) {...}; // проверка, что что-то выбралось

	/*
		Обработчики UI
		--------------------------------------------------------------------------------------------------
	*/		
		config.ui.$clicker.click(handleClick);
		
	/*
		Private-методы
	*/
		function handleClick() {
			var $this = $(this); // Пример локальной переменной
			$this.css({color: 'red'}).fadeOut('slow');
			return false;
		}
	
	/*
		Public-методы
		--------------------------------------------------------------------------------------------------
	*/
		// Для имён public-методов используется UpperCamelCase, this в данном случае -- "класс" плагина
		this.Toggle = function() {
			config.ui.$clicker.slideToggle();
		}
		
		// В data() элемента, к которому был применён плагин, сохраняем ссылку на экземпляр объекта, this в данном случае -- "класс" плагина
		config.$context.data(jqPluginName, this);
	}
		
	/*
		Собственно функция-плагин, т.к. добавляется к $.fn должна вызываться на jQuery-объекте: $('#selector').demoProject_demoPlugin(...), 
		можно добавлять напрямую к $., тогда можно будет вызывать $.demoProject_demoPlugin(...), но и поддержки chaining'а тогда не будет
	
		Для имён плагинов не получится использовать "неймспейсы, поэтому используется префикс "<название проекта>_" 
		http://stackoverflow.com/questions/1219635/jquery-plugin-namespacing-functions
	*/
	$.fn[jqPluginName] = function(options) {
		return this.each(function () {
			var $this = $(this);
			if (!$this.data(jqPluginName))
			{
				new demoPlugin($this, options);
			}
		});	
	}
		
	/*
		Дефолтовые настройки плагина
	*/
	$.fn[jqPluginName].defaults = {
		$context: null, // Оборачивающий блок, внутри которого работает плагин, удобно использовать в качестве контекста для селекторов
		ui: { // Эти секции группируются по смыслу и могут быть произвольной вложенности
			$clicker: null, // Ссылка на jQuery-объект
			clicker: '.default-clicker', // Селектор для выбора объекта
		}		
	}	
})(jQuery); // Будет работать и при jQuery.noConflict();